Author: James Beedy
Class: CS300
Assignment: Sequ ongoing notes

Goal: Implement Seq in python.
This project is divided into 6 compliance levels; cl0, cl1, cl2, cl3, cl4 and cl5.
Each compliance level builds onto the functionality of the seq program.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sequ_CL0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Requirements:
Compliance level 0 of sequ requires absolute minimum functionality.
A CL0 sequ MUST accept exactly two command-line arguments.
Each argument SHOULD be a representation of an integer value.
Any other supplied argument syntax is an error.

If the first integer argument is numerically greater than the second, the sequ
command MUST emit no output. Otherwise, sequ MUST print on its output each of the
integers between the first and second argument, inclusive. Each output integer MUST
be on a line by itself, that is, a line terminated with an appropriate line
terminator for the host environment.

Notes on implementation:

Even with little python experience, I know of the built in range function that
would make this task very easy.
    1. Use range
        a. range usage: range([start,] stop[, step]) -> range object
           Returns a virtual sequence of numbers from start to stop by step

Secondly, I needed to find a way to parse the input arguments from the command line.
after a quick look at the python docs I was able to identify the argparse module.
The argparse module comes in the builtins package which installs with python. This
means a user would not have to install any extra modules to use the program.
This promotes ease of use.

Note: experimenting with other argument parsing modules, and parsing regular expressions.

I added only two arguments to my parser for base functionality spec. The arguments
are "Min" and "Max".
Added coverage for testing.
Usage:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sequ_CL1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Requirements:
Compliance Level 1 of `sequ` adds the full functionality of GNU Coreutils `seq`.
This includes the "--format", "--separator", "--equal-width", "--help" and
"--version" arguments (as well as the one-character abbreviations of these),
the increment argument, and support for floating-point numbers.
The `sequ` initialization and increment arguments are now optional,
as per the `seq` spec.

The `sequ` "--format" specifier MAY format floating-point numbers differently
than `seq`, but it MUST follow some well-described and reasonable floating-point
formatting standard.

Backslash-escapes in the "-s" argument string MUST be processed as in C printf(3).

Notes on implementation:

My first intuition is to build the "--format", "--separator", "--equal-width",
"--help" and "--version" arguments into my pre-existing sequ_cl0 implementation.

The second step I took in this assignment was to assign a default function to the parser
i.e. parser.set_defaults(func=sequ). This way, the function built into the parser.
    1. "--format"
        To implement a format specifier I used an "if" statement onto which the
        rest of my arguments would be added as elif statements.

            if args.format:
                    for i in args.func(args):
                        print(float(i))

    2. "--separator"
        For the separator argument a string need be output to the user of the
        sequence of numbers in the range separated by a string of the users choice.
        To do this I used the reduce function from the functools module, a lambda
        function and a map function. I used a simple if statement to check for backslashes.

        elif args.separator:
        if " \ " not in args.separator:
            print(functools.reduce(lambda x, y: x + args.separator + y,
                                   map(str, args.func(args))))
    3. "--equal-width"
        To implement equal width I used a strategy involving the builtin function
        zfill. Zfill fills 0's into any remaining space in the string that is less
        then the specified length.

            elif args.equalwidth:
                for i in args.func(args):
                    print(str(i).zfill(len(str(int(float(args.Max))))))

    4. "--increment"

        a. Here I used the built in functionality of the range function to implement
        incrementation.

             return range(int(float(args.Min)), int(float(args.Max)) + 1, int(float(args.increment)))


Note: experimenting with other argument parsing modules, and parsing regular expressions.

Note: Added extra feature not in spec: Ability to input int or float for min, max or inc

Note: Will carry float or int input feature into future revisions

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sequ_CL2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Requirements:
Compliance Level 2 of `sequ` adds additional convenience
arguments for formatting.

The arguments that MUST be accepted are as follows:

* *-W, --words*: Output the sequence as a single
  space-separated line. Equivalent to "-s ' '".

* *-p, --pad <pad>*: Output the sequence with elements
  padded on the left to be all of equal width: the pad
  character is given by the single-char pad string
  *<pad>*. Backslash-escapes in *<pad>* MUST be processed as
  in C printf(3).

  Note that the "-w" command of level 2 is equivalent to "-p
  '0'".

* *-P, --pad-spaces*: Output the sequence with elements
  padded with spaces on the left to be all of equal width.
  Equivalent to "-p ' '".

 Implementation:
 Adding on to the functionality of cl1, the implementation of cl2 was seemingly
 much easier now that I had a general framework for how the program would run.

 1. Pad Implementation

         if " \ " not in args.pad:
            if len(args.pad) < 2:
                for i in map(str, args.func(args)):
                    if not i == '\n':
                        len(i) < len(args.max)
                        while len(i) < len(args.max):
                            i = args.pad + str(i)
                        print(i)
            else:
                print("Pad character length must be less than 2! ")

2. Padspaces Implementation

        for i in map(str, args.func(args)):
            if len(i) < len(args.max):
                while len(i) < len(args.max):
                    i = " " + str(i)
            print(i)

3. Equal-width Implementation

        for i in args.func(args):
            print(str(i).zfill(len(str(int(float(args.Max))))))



 Note: Most of my time spent on cl2 was spent in creating tests and documentation for cl2.
 I ending up using doctest methods as well as coverage....sequ_cl2 test suite is under major construction still .

 Coverage Usage:
 $coverage run -L <filename.py>
 $coverage report -m
 $coverage html
Access epydocs in a file browser at /redmineCS300/Assignment<Assign#>/epydocs/index.html

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sequ_CL3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
























